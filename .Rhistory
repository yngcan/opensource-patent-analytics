install.packages("readxl")
pizzazip <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv.zip")
pizzazip <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv.zip")
library(readr)
install.packages("dplyr")
install.packages("plyr")
install.packages(readr)
install.packages(Readr)
install.packages("readr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("ggvis")
install.packages("rgbif")
install.packages("devtools")
install.packages("readxl")
install.packages("readODS")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("readr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("readxl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
pizzazip <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv.zip")
pizzazip <- read_csv("/Users/colinbarnes/Dropbox/open_source_master/datasets\ copy/pizza.csv.zip")
pizzazip <- read_csv("/Users/colinbarnes/Dropbox/open_source_master/datasets\ copy/ritonavir.zip")
pizzazip <- read_csv("/Users/colinbarnes/Dropbox/open_source_master/datasets\ copy/ritonavir.zip")
problems()
problems(...)
pizzazip
View(pizzazip)
pizzazip <- read_csv("/Users/colinbarnes/Dropbox/open_source_master/datasets\ copy/pizza.csv.zip")
pizzazip
View(pizzazip)
pizzazip <- read_csv("/Users/colinbarnes/Dropbox/open_source_master/datasets\ copy/pizza.csv.zip")
pizzazip
View(pizzazip)
write_csv(pizza1, "pizza10.csv", append = FALSE, col_names = TRUE)
write_csv(pizza, "pizza10.csv", append = FALSE, col_names = TRUE)
write_csv("pizza", "pizza10.csv", append = FALSE, col_names = TRUE)
pizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv")
pizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/pizza.csv")
pizza
write_csv("pizza", "pizza10.csv", append = FALSE, col_names = TRUE)
write_csv(pizza, "pizza10.csv", append = FALSE, col_names = TRUE)
pizzapub <- select(pizza, Publication Number)
pizzapub <- select(pizza, "Publication Number")
pizzapub <- select(pizza, 1)
pizzapub
read_csv
pubdate <- select(pizza, "Publication Date")
pubdate <- select(pizza, 1)
pubdate
pubdate <- select(pizza, 2)
pubdate
separate(pubdate, 1, "pubdate", "pubmonth", "pubyear")
separate(pubdate, "Publication Date", "pubdate", "pubmonth", "pubyear")
separate(pubdate, "Publication Date", "pubdate", "pubmonth", "pubyear", sep = ".")
separate(pubdate, "Publication Date", "pubdate", "pubmonth", "pubyear", sep = ["."])
separate(pubdate, "Publication Date", "pubdate", "pubmonth", "pubyear", sep = "**.**")
separate(pubdate, "Publication Date", "pubdate", "pubmonth", "pubyear", sep = "*.*")
separate(pubdate, "Publication Date", "pubdate", "pubmonth", "pubyear", sep = ".*")
separate(pubdate, "Publication Date", "pubdate", "pubmonth", "pubyear", sep = "*")
separate(pubdate, "Publication Date", "pubdate", "pubmonth", "pubyear", sep = ".")
parse_date(pubdate, format = "%d.%m.%Y")
espacenet <- read_csv(/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/espacenet_pizza_2000_2014)
espacenet <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/espacenet_pizza_2000_2014")
espacenet <- read_file("/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/espacenet_pizza_2000_2014")
espacenetpizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/espacenet_pizza", full.names = TRUE))
espacenetpizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/espacenet_pizza", full.names = TRUE)
espacenet <- list.files("/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/espacenet_pizza", full.names = TRUE) ##create a vector of file names to read in
espacenet
class(espacenet)
espacenet1 <- lapply(espacenet, read.csv, header = TRUE)
espacenet1
dim(espacenet1)
ls(espacenet1)
head(espacenet1)
espacenet2 <- ldply(espacenet1)
espacenet2
espacenet2 <- tbl_df(espacenet1)
espacenet2 <- ldply(espacenet1)
espacenet3 <- tbl_df(espacenet2)
espacenet3
espacenet <- list.files("/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/espacenet_pizza", full.names = TRUE)
espacenet1 <- lapply(espacenet, read.csv, header = TRUE)
espacenet2 <- ldply(espacenet1)
espacenet3 <- tbl_df(espacenet2)
espacenet3
View(espacenet3)
espacenet <- list.files("/Users/colinbarnes/Desktop/opensource-patent-analytics/datasets/espacenet_pizza_2000_2014", full.names = TRUE)
espacenet1 <- lapply(espacenet, read.csv, header = TRUE)
espacenet2 <- ldply(espacenet1)
espacenet3 <- tbl_df(espacenet2)
espacenet3
espacenet3 <- tbl_df(espacenet2)
espacenet3
espacenet4 <- tbl_df(espacenet2)
espacenet4
source('~/Desktop/open_source_master/R/roll.R')
source('~/Desktop/open_source_master/R/roll2.R')
key <- 'xytSNUbdGRugVUPy5IoOXsfI0eQyS7I9' ##your consumer key (do not share)
sec_key <- '3loj7tydmShFxRiX'## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
library("base64enc", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("xml2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
key <- 'xytSNUbdGRugVUPy5IoOXsfI0eQyS7I9' ##your consumer key (do not share)
sec_key <- '3loj7tydmShFxRiX'## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
names(heads) <- c('Authorization', 'content-type')
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
content(auth) ##shows the content including the access-token fenerated
auth$status ## if 200 good to go, if 400 something wrong and try again on the keys.
pizzatest <- POST("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("plain/text"), add_headers("Authorization", "BearerToken", "YJ3kAYZGtn3rp0Mak1s9dCZXbWzt"))
xmlRoot(pizzatest)
pizzatest1 <- htmlParse(pizzatest)
pizzatest2 <- xmlRoot(pizzatest1)
pizzatest2
xmlSize(pizzatest2)
xmlSApply(pizzatest2, xmlName)
xmlSApply(pizzatest2, xmlSize)
pizzatest <- POST("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("plain/text"), add_headers("Authorization", "BearerToken", "YJ3kAYZGtn3rp0Mak1s9dCZXbWzt"))
pizzatest
class(pizzatest)
pizzatest1 <- str(content(pizzatest, "parsed"))
pizzatest1
pizzatest2 <- htmlParse(pizzatest1)
pizzatest1 <- htmlParse(pizzatest)
pizzatest1 <- htmlTreeParse(pizzatest)
pizzatest1
pizzatest2 <- xmlRoot(pizzatest1)
pizzatest2
pizzatest2 <- xmlTreeParse(pizzatest1)
pizzatest2 <- xmlParse(pizzatest1)
pizzatest1 <- htmlTreeParse(pizzatest)
pizzatest1
pizzatest2 <- xmlParse(pizzatest1[1])
pizzatest2 <- xmlTreeParse(pizzatest1)
pizzatest1 <- htmlParse(pizzatest)
pizzatest2 <- xmlTreeParse(pizzatest1)
pizzatest2 <- xmlParse(pizzatest1)
pizzatest1
pizzatest1 <- htmlParse(pizzatest)
pizzatest1
pizzatest2 <- xmlParse(pizzatest1)
pizzatest1 <- htmlTreeParse(pizzatest)
pizzatest1
pizzatest2 <- xmlParse(pizzatest1)
pizzatest2 <- xmlParse(pizzatest1, "XMLDocumentContent")
pizzatest1 <- str(content(pizzatest, "parsed"))
pizzatest2 <- htmlTreeParse(pizzatest1)
pizzatest1
pizzatest2 <- xmlParse(pizzatest)
pizzaunlist <- unlist(pizzatest)
pizzaunlist
class(pizzaunlist)
pizzatest <- POST("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("xml"), add_headers("Authorization", "BearerToken", "YJ3kAYZGtn3rp0Mak1s9dCZXbWzt"))
pizzatest
pizzatest <- POST("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("plain/text"), add_headers("Authorization", "BearerToken", "YJ3kAYZGtn3rp0Mak1s9dCZXbWzt"))
pizzatest
head(pizzatest)
xmlRoot(pizzatest)
pizzatest2 <- htmlTreeParse(pizzatest)
pizzatest2
pizzatest2[1]
xmlRoot(pizzatest[1])
class(pizzatest)
xmlRoot(pizzatest2[1])
unlist(pizzatest2[1])
content(pizzatest)
content(pizzatest, as = "text")
content(pizzatest, as = "parsed")
content(pizzatest, as = "parsed", type = "text/xml")
content(pizzatest, as = "parsed", type = "application/x-www-form-urlencoded: parse_query")
content(pizzatest, as = "parsed", type = "plain/text")
content(pizzatest, as = "parsed", type = "parsed")
content(pizzatest, as = "text", type = "parsed")
content(pizzatest, as = "text", type = "text")
content(pizzatest, as = "text", type = "text/xml")
content(pizzatest, as = "text", type = "text/xml")
content(pizzatest, as = "text", type = "text")
content(pizzatest, as = "text", type = "parsed")
content(pizzatest, as = "parsed", type = "text")
content(pizzatest, as = "parsed")
z <- content(pizzatest, as = "parsed")
z
class(z)
args("XMLInternalDocument")
methods(z)
xmlRoot(z)
z <- content(pizzatest, as = "parsed", type = "text")
z <- content(pizzatest, as = "text")
class(z)
z
z <- content(pizzatest, as = "parsed")
class(z)
pizzatest
class(pizzatest)
showMethods(class=class(z), where=search())
y <- docName(doc="XMLInternalDocument")
y <- docName("XMLInternalDocument")
y <- docName(XMLInternalDocument)
y <- coerce(from="XMLInternalDocument", to="character")
y <- as.character(from="XMLInternalDocument", to="character")
y <- as.character("XMLInternalDocument", to="character")
class(y)
y
w <- docName(y)
docName
showMethods("docName")
showMethods(class=class(y), where=search())
y
w <- from="XMLAbstractDocument", to="XMLAbstractNode"
w <- as.character("XMLAbstractDocument", to="character")
w
class(w)
doc="XMLInternalDocument"
doc
class(doc)
class(z)
doc = c("XMLInternalDocument", "XMLAbstractDocument")
doc
class(pizzatest)
z <- content(pizzatest, as = "parsed")
x
z
z <- content(pizzatest, as = "parsed")
z
z <- str(content(pizzatest, "parsed")) ##something changed here, should show the 4 groups
z
z <- content(pizzatest, as = "parsed") ##something changed here, should show the 4 groups
class(z)
doc = c("XMLInternalDocument", "XMLAbstractDocument")
doc
showMethods(class=class(doc), where=search())
class(pizzatest)
pizzatest
head(pizzatest)
z
class(z)
showMethods(class=class(z), where=search())
doc1 = xmlInternalTreeParse(doc)
doc1 = xmlInternalTreeParse(y)
doc1 = xmlParse(y)
doc1 = xmlParse(doc)
doc1 = xmlParse(y)
class(y)
showMethods(class=class(doc), where=search())
q  <- xmlToDataFrame(doc="character", colClasses="ANY", homogeneous="ANY", collectNames="ANY", nodes="ANY")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
q  <- tbl_df(doc)
q  <- data.frame(doc)
xmlParse(doc, useInternalNodes = TRUE)
doc1="XMLInternalDocument"
xmlParse(doc1, useInternalNodes = TRUE)
xmlTreeParse(doc1, useInternalNodes = TRUE)
xmlTreeParse(doc1, useInternalNodes = TRUE)
xmlRoot(doc1)
z
class(z)
showMethods(class=class(z), where=search())
getEncoding(obj="XMLInternalDocument")
xmlSource(url="XMLInternalDocument")
xml = xmlInternalTreeParse(y)
showMethods(class=class(z), where=search())
docName <- (x="XMLInternalDocument")
getwd()
pizzatest
head(pizzatest)
showMethods(class=class(pizzatest), where=search())
showMethods(class=class(pizzatest), where=search())
showMethods(class=class(z), where=search())
docName <- (x="XMLInternalDocument")
docName
class(docName)
getEncoding(obj="XMLInternalDocument")
readHTMLList(doc="HTMLInternalDocument")
if (inherits(X, "try-error")) NA else X} )
if (inherits(X, "try-error")) NA else X} )
if (inherits(X, "try-error")) NA else X} )
results <- lapply(pizzatest, function(f)
X <- try(xmlParse(f))
if (inherits(X, "try-error")) NA else X )
results <- lapply(pizzatest, function(f)
X <- try(xmlParse(f))
if(inherits(X, "try-error")) NA else X )
results <- lapply(pizzatest, function(f)
X <- try(xmlParse(f))
(inherits(X, "try-error")) NA else X )
install.packages("rcrossref")
install.packages("alm")
library(httr)
install.packages("base64enc")
library(XML)
library(httr)
library(base64enc)
key <- 'xytSNUbdGRugVUPy5IoOXsfI0eQyS7I9' ##your consumer key (do not share)
sec_key <- '3loj7tydmShFxRiX'## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
names(heads) <- c('Authorization', 'content-type')
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
content(auth) ##shows the content including the access-token generated
auth$status ## if 200 good to go, if 400 something wrong and try again on the keys.
pizza1 <- POST("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("plain/text"), add_headers("Authorization", "BearerToken", "4a59U9aXUyOmCayDXhGOdFFwVEOr"), accept_xml())
pizza2 <- content(pizza1)
pizza2
class(pizza2)
pizza3 <- xmlTreeParse(pizza2)
pizza3 <- htmlTreeParse(pizza2)
pizza3 =<- xmlParse(pizza2)
pizza3 <- xmlParse(pizza2)
pizza3 <- xmlParse(pizza1)
pizza3
pizza3 <- htmlParse(pizza1)
pizza3
r <- GET("http://httpbin.org/get")
r
status_code(r)
headers(r)
str(content(r))
str(content(pizza1))
r <- GET("http://httpbin.org/get")
http_status(r)
content(r, "text")
stringi::stri_enc_detect(content(pizza1, "raw"))
content(pizza1, "raw")
bin <- content(pizza1, "raw")
writeBin(bin, "myfile.txt")
bin <- content(pizza1$content, "raw")
bin <- content(pizza1$content, "text")
bin <- content(pizza1$content, "parsed")
bin1 <- str(content(pizza1, "parsed"))
writeBin(bin1, "myfile.txt")
writeBin(bin1, "myfile.xml")
writeBin(bin1$content, "myfile1.txt")
headers(pizza1)
number <- GET("http://ops.epo.org/3.1/rest-services/number-service/application/original/US.11380365.A1.20070515/docdb", content_type("plain/text"), add_headers("Authorization", "BearerToken", "4a59U9aXUyOmCayDXhGOdFFwVEOr"), accept_xml())
number
str(content(numbers)$headers)
str(content(number)$headers)
key <- 'BiaLwkHwuus8WjXQPdvVajGGrLMkZnf9' ##your consumer key (do not share)
sec_key <- 'wkvTOQeuLwUGYxcw' ## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
names(heads) <- c('Authorization', 'content-type')
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
content(auth) ##shows the content including the access-token generated
auth$status ## if 200 good to go, if 400 something wrong and try again on the keys.
eopnum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken")
)
eponum
eopnum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept_xml()
)```
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept_xml())
eponum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
class(eponum)
content(eponum)
plastictit <- GET("http://ops.epo.org/3.1/rest-services/published-data/search?q=ti%3Dplastic", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
plastictit
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
key <- 'BiaLwkHwuus8WjXQPdvVajGGrLMkZnf9' ##your consumer key (do not share)
sec_key <- 'wkvTOQeuLwUGYxcw' ## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
names(heads) <- c('Authorization', 'content-type')
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
content(auth) ##shows the content including the access-token generated
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", ""hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
plastictit <- GET("http://ops.epo.org/3.1/rest-services/published-data/search?q=ti%3Dplastic", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
plastictit
key <- 'BiaLwkHwuus8WjXQPdvVajGGrLMkZnf9' ##your consumer key (do not share)
sec_key <- 'wkvTOQeuLwUGYxcw' ## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
names(heads) <- c('Authorization', 'content-type')
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
content(auth) ##shows the content including the access-token generated
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken", ""hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken", hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum
plastictit1 <- GET("http://ops.epo.org/3.1/rest-services/published-data/search?q=ti%3Dplastic", content_type("application/xml"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
plastictit1
content(plastictit1)
eponum2 <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
content(eponum2)
eponum2 <- GET("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("plain/text"), add_headers("Authorization", "BearerToken", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
pizza <- GET("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("plain/text"), add_headers("Authorization", "BearerToken", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
content(pizza)
