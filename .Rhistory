eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept_xml())
eponum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
class(eponum)
content(eponum)
plastictit <- GET("http://ops.epo.org/3.1/rest-services/published-data/search?q=ti%3Dplastic", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
plastictit
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
key <- 'BiaLwkHwuus8WjXQPdvVajGGrLMkZnf9' ##your consumer key (do not share)
sec_key <- 'wkvTOQeuLwUGYxcw' ## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
names(heads) <- c('Authorization', 'content-type')
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
content(auth) ##shows the content including the access-token generated
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", ""hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
plastictit <- GET("http://ops.epo.org/3.1/rest-services/published-data/search?q=ti%3Dplastic", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
plastictit
key <- 'BiaLwkHwuus8WjXQPdvVajGGrLMkZnf9' ##your consumer key (do not share)
sec_key <- 'wkvTOQeuLwUGYxcw' ## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
names(heads) <- c('Authorization', 'content-type')
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
content(auth) ##shows the content including the access-token generated
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
eponum
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken", ""hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken", hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
eponum
plastictit1 <- GET("http://ops.epo.org/3.1/rest-services/published-data/search?q=ti%3Dplastic", content_type("application/xml"), add_headers("Authorization", "BearerToken"), accept("application/xml"))
plastictit1
content(plastictit1)
eponum2 <- GET("http://ops.epo.org/3.1/rest-services/published-data/publication/epodoc/EP1000000/abstract", content_type("plain/text"), add_headers("Authorization", "BearerToken", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
content(eponum2)
eponum2 <- GET("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("plain/text"), add_headers("Authorization", "BearerToken", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
pizza <- GET("http://ops.epo.org/3.1/rest-services/published-data/search/biblio/?q=ti%3Dpizza", content_type("plain/text"), add_headers("Authorization", "BearerToken", "hM2EDCxfwi2sEkInuy0QoivCGjrh"), accept("application/xml"))
content(pizza)
=======
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by()
?group_by()
?group_by
by_package <- group_by("package")
by_package <- group_by(package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
count = n(by_package, mean(size))
count = n(package, mean(size))
count = n(package)
count = n()
skip()
bye()
library(xlsx)
install.packages("xlsx")
wipotrends <- read.xlsx(wipo_patent_trends.xlsx, sheetIndex=1, startRow=5, endRow=NULL)
wipotrends <- read.xlsx("wipo_patent_trends.xlsx", sheetIndex=1, startRow=5, endRow=NULL)
library(xlsx)
wipotrends <- read.xlsx("wipo_patent_trends.xlsx", sheetIndex=1, startRow=5, endRow=NULL)
dir()
wipotrends <- read.xlsx("/Users/colinbarnes/Desktop/opensource-patent-analytics/patent_datasets/wipo_patent_trends.xlsx", sheetIndex=1, startRow=5, endRow=NULL)
head(wipotrends)
write.xlsx(wipotrends)
write.xlsx(wipotrends, wipotrendsxl, sheetName="Sheet1", col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
write.xlsx(wipotrends, "wipotrendsxl.xlsx", sheetName="Sheet1", col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
View("wipotrendsxl.xlsx")
head("wipotrendsxl.xlsx")
read.xlsx("wipotrendsxl.xlsx")
read.xlsx("wipotrendsxl.xlsx", sheetIndex=1)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
wipotrends <- read.xlsx("/Users/colinbarnes/Desktop/opensource-patent-analytics/patent_datasets/wipo_patent_trends.xlsx", sheetIndex=1, startRow=5, endRow=NULL) %>% head(wipotrends)
source('~/Desktop/opensource-patent-analytics/read excel function.R')
source('~/Desktop/opensource-patent-analytics/read excel function.R')
source('~/Desktop/opensource-patent-analytics/read excel function.R')
wipotrends <- read.xlsx("/Users/colinbarnes/Desktop/opensource-patent-analytics/patent_datasets/wipo_patent_trends.xlsx", sheetIndex=1, startRow=5, endRow=NULL)
head(wipotrends)
library(xlsx)
wipotrends <- read.xlsx("/Users/colinbarnes/Desktop/opensource-patent-analytics/patent_datasets/wipo_patent_trends.xlsx", sheetIndex=1, startRow=5, endRow=NULL)
head(wipotrends)
write.csv(wipotrends, file="wipotrendsxl.xlsx")
write.csv(wipotrends, file="wipotrends.csv")
plot(wipotrends)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("XLConnect")
install.packages("checkpoint")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("magrittr")
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
View(gradebook)
q()
library("leafletR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("gbif")
install.packages("rgif")
install.packages("rgbif")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
devtools::install_github("ropensci/rgbif")
library(rgbif)
install.packages("rgeos")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
require(rgeos)
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
require(rgeos)
library(rgeos)
install.packages("rgeos", repos="http://R-Forge.R-project.org")
R64 INSTALL /Users/colinbarnes/Desktop/rgeos_0.3-8.tar/rgeos_version.tar.gz --configure-args='--with-geos-config=/Library/Frameworks/GEOS.framework/unix/bin/geos-config'
require(rgeos)
install.packages("rgeos")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
bahamasraw <- read.csv("bahamas_patent.csv", header = TRUE, sep = ",")
install.packages("readr")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("readr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv")
pizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv")
pizza
parse_date(pizza, format = "%d-%m-%Y")
parse_date(pizza, format = "%d.%m.%Y")
parse_date(pizza, format = "%d-%m-%Y")
parse_date(pizza, "Publication Date", format = "%d-%m-%Y")
parse_date(pizza, format = "%d.%m.%Y")
diet <- read_csv("/Users/colinbarnes/~coursera-repo/RStudio/R\ programming/diet_data.zip")
diet <- read_file("/Users/colinbarnes/~coursera-repo/RStudio/R\ programming/diet_data.zip")
diet
diet <- read_file("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/espacenet_pizza_2000_2014")
espacenet <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/espacenet_pizza_2000_2014")
directory <- list.files("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/espacenet_pizza_2000_2014", full.names = TRUE)
directory <- lapply(directory, read.csv, header = TRUE) ##Iterate over each file, reading in the data
espacenet <- ldply(directory)
head(espacenet)
directory()
directory
espacenet <- ldply(directory)
print(espacenet)
espacenet
directory
col_names(espacenet)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
write_csv(espacenet, espacentsingle, append = FALSE, col_names = !append)
write_csv(espacenet, "espacentsingle", append = FALSE, col_names = !append)
write_csv(espacenet, "", append = FALSE, col_names = !append)
write_csv(espacenet, "/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/espacenet_pizza_2000_2014/espacenetsingle", append = FALSE, col_names = !append)
write_csv(espacenet, "/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/espacenet_pizza_2000_2014/espacenetsingle", append = FALSE, col_names = append)
getwd()
pizzazip <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv.zip")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("readr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
pizzazip <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv.zip")
pizzazip
pubdate <- select(pizzazip, "Publication Date")
pubdate <- select(pizzazip, [2])
pubdate <- select(pizzazip, 2)
pubdate
pubparse <- parse_date(pubparse, format ="%d.%m.%Y")
pubparse <- parse_date(pubdate, format ="%d.%m.%Y")
problems(pubdate)
pubdate
pubparse <- parse_date(Publication Date, format ="%d.%m.%Y")
pubparse <- parse_date("Publication Date"", format ="%d.%m.%Y")
pubparse <- parse_date("Publication Date"", format = "%d.%m.%Y")
pubparse <- parse_date("Publication Date", format = "%d.%m.%Y")
problems(pubparse)
pubparse
pubparse <- col_datetime("Publication Date", format = "%d.%m.%Y")
pubparse
pubdate <- select(pizzazip, 2)
pubparse <- col_datetime(format = "%d.%m.%Y")
pubparse
pizzazip
pizzazip <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv.zip")
pubdate <- separate(pizzazip, "Publication Date" c("pubday", "pubmonth", "pubyear""))
pubdate <- separate(pizzazip, "Publication Date", c("pubday", "pubmonth", "pubyear""))
CDAWD
ASC
pubdate <- separate(pizzazip, "Publication Date", c("pubday", "pubmonth", "pubyear"))
```
pubdate <- separate(pizzazip, Publication Date, c("pubday", "pubmonth", "pubyear"))
pubdate <- separate(pizzazip, "Publication Date", c("pubday", "pubmonth", "pubyear"))
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
pubdate <- separate(pizzazip, "Publication Date", c("pubday", "pubmonth", "pubyear"))
pubdate
pizzazip
pubdate <- separate(pizzazip, "Publication Date", c("pubday", "pubmonth", "pubyear") sep = ",")
pubdate <- separate(pizzazip, "Publication Date", c("pubday", "pubmonth", "pubyear"), sep = ",")
pubdate <- separate(pizzazip, "Publication Date", c("pubday", "pubmonth", "pubyear"), sep = ".")
pubdate
pizzazip
select(pizzazip, "pubyear")
select(pizzazip, pubyear)
separate(pizzazip, "Publication Date", c("pubday", "pubmonth", "pubyear"), sep = ".")
pizzazip
pizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv.zip")
pizza <- tbl_df(pizza)
pizza
separate(pizza, "Publication Date", c("pubday", "pubmonth", "pubyear"), sep = ".")
pizza
head(pizza)
separate(pizza, Publication Date, c("pubday", "pubmonth", "pubyear"), sep = ".")
View(pizza)
install.packages("edawr")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
separate(pizza, "Publication Date", c("pubday", "pubmonth", "pubyear"), sep = ".")
pubyear
View(pizza)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
pizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv.zip") ## load the file
pizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv") ## load the file
pizza <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza.csv") ## load the file
pizza
pizza <- tbl_df(pizza) ## create a data table (use a different name if desired)
pizza
separate(pizza, "Publication Date", c("pubday", "pubmonth", "pubyear"), sep = ".")
separate(pizza, "Publication.Date", c("pubday", "pubmonth", "pubyear"), sep = ".")
select(pizzazip, pubyear)
select(pizza, pubyear)
View(pizza)
pizza
pizza1 <- tbl_df(pizza) ## create a data table (use a different name if desired)
pizza1
pizza2 <- separate(pizza, "Publication.Date", c("pubday", "pubmonth", "pubyear"), sep = ".")
pizza2
pizza <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza1.csv")
pizza1 <- tbl_df(pizza)
View(pizza1)
pizza2 <- separate(pizza1, "Publication.Date", c("pubday", "pubmonth", "pubyear"), sep =",")
View(pizza2)
pizza2
pizza <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza1.csv" na.strings =c(" ", "NA", ""))
pizza <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza1.csv", na.strings =c(" ", "NA", ""))
View(pizza)
pizza1 <- tbl_df(pizza)
pizza1
pizza1[!complete.cases(pizz1),]
pizza1[!complete.cases(pizza1),]
pizza2 <- separate(pizza1, "Publication.Date", c("pubday", "pubmonth", "pubyear"), sep =",")
pizza2
pizza2 <- na.omit(pizza1)
View(pizza2)
View(pizza2)
pizza1
View(pizza1)
pizza2 <- na.omit("NA")
View(pizza2)
pizza2 <- na.omit(NA)
View(pizza2)
pizza2 <- !na.omit(NA)
View(pizza2)
?max
apply(pizza1, 2, max, na.rm=TRUE)
View(pizza1)
pizza2 <- apply(pizza1, max, na.rm=TRUE)
select(pizza1, "Publication.Date")
library("readr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
pizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza1.csv", na.strings =c(" ", "NA", ""))
pizza <- read_csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza1.csv")
View(pizza) ## to check any blank cells have become NA
pubdate <- select(pizza, Publication Date)
pubdate <- select(pizza, "Publication Date")
pizza
pizza <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza1.csv", na.strings= c("NA", " ", "")
pizza <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza1.csv", na.strings= c("NA", " ", ""))
pizza <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizza1.csv", na.strings = c("NA", " ", ""))
View(pizza) ## to check any blank cells have become NA
?as.Date
pizza1 <- tbl_df(pizza) ## create a data table (use a different name if desired)
View(pizza1)
as.Date(pizza1, "Publication Date")
as.Date(pizza1, "Publication Date", format = "%d","%m", "%Y")
as.Date(pizza1, format = "%d","%m","%Y")
as.Date("Publication Date", format = "%d","%m","%Y")
as.Date(pizza1, "Publication Date", format = "%d","%m","%Y")
as.Date("pizza1", "Publication Date", format = "%d","%m","%Y")
is.na("Publication Date")
as.numeric(as.character(pizza1$"Publication Date"))
pizza1
select(pizza1, Publication Date)
select(pizza1, "Publication Date")
as.numeric(as.character(pizza1$Publication Date))
head(pizza1)
header(pizza1)
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates.csv", na.strings = c("NA", " ", ""))
View(pizzadates) ## to check any blank cells have become NA
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates.csv", na.strings = c("NA", " ", ""))
View(pizzadates)
pizza1 <- tbl_df(pizzadates) ## create a data table (use a different name if desired)
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
pizza1 <- tbl_df(pizzadates) ## create a data table (use a different name if desired)
pizza1
as.numeric(as.character(pizza1$Publicationdate))
View(pizza1)
select(pizza1, "Publicationdate")
select(pizza1, Publicationdate)
head(pizza1)
pizza2 <- separate(pizzadates, "Publication.Date", c("pubday", "pubmonth", "pubyear"), sep =".")
pizza2 <- separate(pizza1, "Publication.Date", c("pubday", "pubmonth", "pubyear"), sep =".")
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =".")
pizza1
View(pizza1)
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates.csv", na.strings = c("NA", " ", ""))
View(pizzadates) ## to check any blank cells have become NA
pizza1 <- tbl_df(pizzadates) ## create a data table (use a different name if desired)
pizza1 <- tbl_df(pizzadates)
pizza1
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =".")
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep ="/")
View(pizza2)
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates2.csv", na.strings = c("NA", " ", ""))
View(pizzadates)
pizza1 <- tbl_df(pizzadates)
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =",")
View(pizza2)
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates3.csv", na.strings = c("NA", " ", ""))
View(pizzadates)
pizza1 <- tbl_df(pizzadates)
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =".")
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates3.csv", na.strings = c("NA", " ", ""))
View(pizzadates)
dim(pizzadates)
class(pizzadates)
str(pizzadates)
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates3.csv", stringsAsFactors = FALSE, na.strings = c("NA", " ", ""))
str(pizzadates)
View(pizzadates)
pizza1 <- tbl_df(pizzadates)
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =".")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
str_replace(fruits, "[aeiou]", "-")
pizza2 <- str_replace(pizza1, "Publicationdate", "[.]", "/")
pizza2 <- str_replace("Publicationdate", "[.]", "/")
View(pizza2)
pizza2 <- str_replace(pizza1, "[.]", "/")
View(pizza1)
str(pizza1)
pizza2 <- as.Date(pizza1, format = "%d","%m","%Y")
install.packages("asdate")
install.packages("date")
pizza2 <- as.date(pizza1, order = "mdy")
library("date", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
pizza2 <- as.date(pizza1, order = "mdy")
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates2.csv", na.strings = c("NA", " ", ""), stringsAsFactors = FALSE)
View(pizzadates)
pizza1 <- tbl_df(pizzadates)
pizza1
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =".")
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =",")
View(pizza2)
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates3.csv", na.strings = c("NA", " ", ""), stringsAsFactors = FALSE)
View(pizzadates)
str(pizzadates)
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =".")
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep ="%d"."%m"."%Y")
pizza2 <- separate(pizza1, "Publicationdate", c("pubday", "pubmonth", "pubyear"), sep =".",".",".")
view(pizza2)
View(pizza2)
View(pizza1)
View(pizzadates)
str(pizzadates) ##to check it is a character field
str_detect(pizzadates, ".")
date_decimal(pizzadates)
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
date_decimal(pizzadates)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ritonavir <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/ritonavir.csv", na.strings = c("NA", " ", ""), stringsAsFactors = FALSE)
View(ritonavir)
str(ritonavir) ##to check it is a character field
ritonavir1 <- tbl_df(ritonavir)
ritonavir1
select("earliest.priority.date")
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
fruits
str_split_fixed(fruits, "and", 3)
str_split_fixed(fruits, " and ", 4)
str(fruits)
pizzadates <- read.csv("/Users/colinbarnes/Desktop/opensource-patent-analytics/patentdatasets/pizzadates3.csv", na.strings = c("NA", " ", ""), stringsAsFactors = FALSE)
View(pizzadates)
str(pizzadates) ##to check it is a character field
pizzastop <- str_split_fixed(pizzadates, ".", 3)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
reset()
rm(list=ls())
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
thisday <- today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, LABEL = TRUE)
wday(this_day, Label = TRUE)
wday(this_day, label = TRUE)
install.packages(readx1)
install.packages("readxl")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
getwd()
bahamasraw <- read.csv("bahamas_patent.csv", header = TRUE, sep = ",")
bahamasraw <- read.csv("/Users/colinbarnes/Dropbox/open_source_master/bahamas_patent.csv", header = TRUE, sep = ",")
View(bahamasraw)
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
inventorsclean <- separate(bahamasraw, "Inventors", sep = ";", remove = TRUE, c("1", "2", "3", "4", "5", "6", "7", "8", "9"), extra = "merge")
View(inventorsclean)
View(bahamasraw)
View(bahamasraw)
View(inventorsgather)
inventorsgather <- gather(inventorsclean, inventors, individuals, 1:9)
View(inventorsgather)
bahamasraw <- read.csv("/Users/colinbarnes/Dropbox/open_source_master/bahamas_patent.csv", header = TRUE, sep = ",")
View(bahamasraw)
inventorsclean <- separate(bahamasraw, "Inventors", sep = ";", remove = TRUE, c("1", "2", "3", "4", "5", "6", "7", "8", "9"), extra = "merge")
View(inventorsclean)
inventorsgather <- gather(inventorsclean, inventors, individuals, 1:9)
View(inventorsgather)
write.csv(inventorsgather)
write.csv(inventorsclean, file="inventorsclean.csv")
write.csv(inventorsgather, file="inventorsgather.csv")
head(inventorsgather)
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
class(Publication.Number)
class("Publication.Number")
shopping_list <- c("apples x4", "flour", "sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract("Publication.Number", "[a-z]+"))
str_extract("Publication.Number", "[a-z]+")
str_extract("Publication.Number", "[a-z]")
str_extract("Publication.Number", "[a-z]")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
shopping_list
str_extract_all(shopping_list, "[a-z]+")
str_extract_all(shopping_list, "\\b[a-z]+\\b")
str_extract_all(shopping_list, "\\d")
library("stringi", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
stri_startswith_charclass(" trim me! ", "\\p{WSpace}")
stri_startswith_fixed(c("a1", "a2", "b3", "a4", "c5"), "a")
stri_detect_regex(c("a1", "a2", "b3", "a4", "c5"), "^a")
stri_startswith_fixed("ababa", "ba"
)
stri_startswith_fixed("ababa", "ba")
stri_startswith_fixed("ababa", "ba", from=2)
pat <- stri_paste("\u0635\u0644\u0649 \u0627\u0644\u0644\u0647 ",
"\u0639\u0644\u064a\u0647 \u0648\u0633\u0644\u0645XYZ")
pat
stri_endswith_coll("\ufdfa\ufdfa\ufdfaXYZ", pat, strength=1)
shopping_list <- c("apples x4", "flour", "sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
inventorsgather
inventors1 <- tbl_df(inventorsgather)
inventors1
View(inventorsgather)
class(inventorsgather)
inventors1 <- tbl_df(inventorsgather)
inventors1
inventors2 <- select(inventorsgather, "Publication.Number")
inventors2 <- select(inventorsgather, Publication.Number)
inventors2
inventors3 <- tbl_df(inventors2)
inventors3
str_extract(inventors3, "[a-z]+")
str_extract(Publication.date, "[a-z]+")
str_extract("Publication.date", "[a-z]+")
str_extract(inventors3, Publication.date, "[a-z]+")
str_extract("Publication.Number", "[a-z]+")
str_extract(Publication.Number, "[a-z]+")
str_extract(inventors3, Publication.Number, , "[a-z]+")
View(inventors3)
>>>>>>> Stashed changes
